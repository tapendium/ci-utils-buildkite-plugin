#!/usr/bin/env bash

set -eo pipefail

if [[ "${TAP_CI_ARGS_PUBLISH_LANGUAGES_DEBUG:-false}" =~ (true|on|1) ]]; then
	echo "~~~ :hammer: Enabling debug mode"
	set -x
fi

# Echo to standard error
function log {
	echo "$@" 1>&2
}

# Expand variable if it starts with $ sign
function expandVariable() {
	if [[ "${1::1}" == "\$" ]]; then
		local varName=${1:1}
		echo "${!varName}"
	else
		echo "${1}"
	fi
}

# Re-export variables passed into plugin as local variables
function collect_args() {
	local prefix="TAP_CI_ARGS_PUBLISH_LANGUAGES_"
	local prefix_length="${#prefix}"

	while IFS='=' read -r name value; do
		if [[ $name == "$prefix"* ]]; then
			local new_var_name="${name:$prefix_length}"
			declare -rg "$new_var_name"="$(expandVariable "${value}")"
		fi
	done < <(env | sort)
}

collect_args

function get_service_name() {
	local repo_url="$BUILDKITE_REPO"
	local repo
	repo="$(basename "$repo_url")"

	[[ $repo =~ ^(.+).git$ ]]

	echo "${BASH_REMATCH[1]}"
}

languages_file_path="${FILE_PATH?frontend/locale/en.json}"
service_name_guess="${SERVICE_NAME:-$(get_service_name)}"
service_name=${service_name_guess}
event_bus="${EVENT_BUS?event_bus is not set}"
detail_type="${DETAIL_TYPE?detail_type is not set}"
user_id="${USER_ID?user_id is not set}"
language_code=${LANGUAGE_CODE:-"en"}
languages="$(jq . "${languages_file_path}")"

event_detail="$(jq --null-input --compact-output \
	--arg service "${service_name}" \
	--arg userId "${user_id}" \
	--arg code "${language_code}" \
	--argjson languages "${languages}" \
	'{
     userId: $userId,
     effectiveUserId: $userId,
     data: { service: $service, code: $code, languages: $languages}
   }')"

languages_event="$(jq --null-input --compact-output \
	--arg bus "${event_bus}" \
	--arg service "${service_name}" \
	--arg type "${detail_type}" \
	--arg detail "${event_detail}" \
	'[{
       EventBusName: $bus,
       Source: $service,
       DetailType: $type,
       Detail: $detail
     }]
     ')"

log "Publishing languages for service: ${service_name}"

response="$(aws events put-events --entries "$languages_event" --output json)"
failed_count="$(jq '.FailedEntryCount' <<<"$response")"
if [ ! "$failed_count" = 0 ]; then
	log "Failed to publish languages to EventBridge"
	log "Error: "
	log "$response"
	exit 1
fi
log "Published languages for service: ${service_name}"
